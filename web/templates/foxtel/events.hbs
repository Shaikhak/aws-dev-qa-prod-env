<div class="container pt-3">

  <h3 class="py-3">Configure events</h3>

  <p class="pb-2">
    Use this page to edit upcoming events for sale via your Amazon Connect instance. Events are initially loaded in as inactive and can be edited
    prior to marking as active. Event times are displayed in time zone: 
    {{siteConfig.callCentreTimeZone}}.
  </p>

  <table id="eventsTable" class="display responsive nowrap" width="100%" data-page-length="25">
    <thead>
      <tr>
          <th width="5%" class="dt-center"><i class="fas fa-check text-success" title="Active"></i></th>
          <th width="20%">Start</th>
          <th width="34%">Name</th>
          <th width="10%">FastPath</th>
          <th width="20%" class="dt-center">FastPath starts</th>
          <th width="10%">Price</th>
          <th width="3%" class="dt-center"></th>
          <th width="3%" class="dt-center"></th>
      </tr>
    </thead>
    <tbody>
      {{#each events}}
        <tr> 
          <td class="dt-center">
            {{this.active}}
          </td> 
          <td>
            {{this.startTimestamp}}
          </td>
          <td>
            {{this.name}}
          </td> 
          <td class="dt-center">
            {{this.fastPathEnabled}}
          </td> 
          <td class="dt-center">
            {{this.fastPathStart}}
          </td> 
          <td>
            {{formatCentsAsDollars this.price}}
          </td> 
          <td class="dt-center">
            <a href="javascript:editEventDialog('{{this.eventId}}');"><i class="fas fa-cog fa-lg text-primary" title="Configure"></i></a>
          </td>
          <td class="dt-center">
            {{#if ../tester}}
              <i class="fas fa-times-circle fa-lg text-muted" title="Delete disabled"></i>
            {{else}}
              <a href="javascript:deleteEventDialog('{{this.eventId}}');"><i class="fas fa-times-circle fa-lg text-danger" title="Delete"></i></a>
            {{/if}}
          </td>
        </tr>
      {{/each}}
    </tbody>
  </table>

</div>

{{#unless tester}}
<div class="modal" tabindex="-1" role="dialog" id="editEventModal">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header text-white bg-dark">
        <h5 class="modal-title">Edit event</h5>
        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="editEventForm">
        <input type="hidden" id="eventToEdit"/>
        <div class="modal-body">
          <div class="form-group">
            <label>Event name *</label>
            <input type="text" class="form-control" id="editEventName" maxLength="512" minLength="4" placeholder="Event name" required>
            <small>Enter the name of the event</small>
          </div>
          <div class="form-group">
            <label>Speech name *</label>
            <input type="text" class="form-control" id="editEventSpeechName" maxLength="512" minLength="4" placeholder="Speech name" required>
            <small>Enter the Polly friendly name of the event to speak to the customer</small>
          </div>
          <div class="form-group">
            <label>Fast path minutes *</label>
            <input type="number" class="form-control" id="editEventFastPathMinutes" min="0" max="900000" placeholder="Fast path minutes" required>
            <small>Enter the minutes before this event that fast path is enabled, 0 to disable fast path</small>
          </div>
          <div class="form-check pb-3">
            <input class="form-check-input" type="checkbox" value="" id="editEventActive">
            <label class="form-check-label" for="editEventActive">
              Event is ready for sale
            </label>
          </div>
          <div class="form-group">
            <label>Event description</label>
            <textarea class="form-control" id="editEventDescription" maxLength="1024" placeholder="Description" rows="4"></textarea>
            <small>Enter a description for this event</small>
          </div>

          <hr>

          <div class="form-group">
            <label>Session times ({{siteConfig.callCentreTimeZone}})</label>

            <div id="sessionTimes"/>

          </div>
          
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Update event</button>
        </div>
      </form>
    </div>
  </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="deleteEventModal">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header text-white bg-dark">
        <h5 class="modal-title">Delete event</h5>
        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="deleteEventForm">
        <input type="hidden" id="eventToDelete" value=""/>
        <div class="modal-body">
          <div class="form-group">
            <p>Are you sure you want to delete the event: <span id="eventToDeleteName">Unknown</span> on <span id="eventToDeleteWhen">Unknown</span>?</p>
            <p>
              This cannot be undone remove the event permanently? It may reappear in a raw form if still active (but will be placed in a not ready state).
            </p>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-danger">Delete</button>
        </div>
      </form>
    </div>
  </div>
</div>
{{/unless}}

<script>
  $(document).ready(function () 
  {
    var eventsTable = $('#eventsTable').DataTable( 
    {
      responsive: {
        details: false
      },
      language: {
        emptyTable: 'No events are configured'
      },
      order: [[ 1, "asc" ]],
      columns: [
        {
          responsivePriority: 2,
          orderable: true,
          render: function (data, type, row)
          { 
            if (type === 'display')
            {
              if (data === 'true')
              {
                return '<i class="fas fa-check text-success" title="Active"></i>';
              }
              else
              {
                return '';
              }
            }
            else
            {
              return data;
            }
          }
        },
        {
          responsivePriority: 1,
          orderable: true,
          render: function (data, type, row)
          { 
            if (type === 'display')
            {
              return formatDateTimeCallCentre(data);
            }
            else
            {
              return data;
            }
          }
        },
        { 
          responsivePriority: 3,
          orderable: true,
          render: function (data, type, row)
          { 
            return formatTooltip(type, data, 40);
          }
        },

        {
          responsivePriority: 4,
          orderable: true,
          render: function (data, type, row)
          { 
            if (type === 'display')
            {
              if (data === 'true')
              {
                return '<i class="fas fa-fire text-danger" title="Fast path is active"></i>';
              }
              else
              {
                return '';
              }
            }
            else
            {
              return data;
            }
          }
        },
        {
          responsivePriority: 5,
          orderable: true,
          render: function (data, type, row)
          { 
            if (type === 'display')
            {
              if (type === 'display' && data !== undefined && data.trim() !== '')
              {
                return formatDateTimeCallCentre(data);
              }
              else
              {
                return '-';
              }
            }
            else
            {
              return data;
            }
          }
        },
        {
          responsivePriority: 6,
          orderable: true
        },
        {
          responsivePriority: 7,
          orderable: false
        },
        {
          responsivePriority: 8,
          orderable: false
        }
      ]
    });
  });

  var existingEvents = {{{json events}}};

  function editEventDialog(eventId)
  {
    var event = existingEvents.find(ev => ev.eventId === eventId);

    if (event !== undefined)
    {
      $('#eventToEdit').val(event.eventId);
      $('#editEventName').val(event.name);

      $('#editEventSpeechName').val(event.speechName);
      $('#editEventFastPathMinutes').val(event.fastPathMinutes);

      if (event.active)
      {
        $('#editEventActive').attr('checked', 'checked');
      }
      else
      {
        $('#editEventActive').removeAttr('checked');
      }

      $('#editEventDescription').val(event.description);

      var sessionTimesHTML = '<ul>';

      event.sessions.forEach(session => {
        sessionTimesHTML += `       <li>${formatDateTimeCallCentre(session.startTimestamp)}</li>\n`;
      });

      sessionTimesHTML += '</ul>'

      $('#sessionTimes').html(sessionTimesHTML);
      
      $('#editEventModal').modal();
    }
    else
    {
      errorToast('Could not find event to edit');
    }
  }

  $('#editEventForm').submit(async function(e)
  {
    e.preventDefault();

    var eventId = $('#eventToEdit').val().trim();

    var name = $('#editEventName').val().trim();
    var speechName = $('#editEventSpeechName').val().trim();
    var fastPathMinutes = $('#editEventFastPathMinutes').val().trim();
    var active = $('#editEventActive').is(':checked');
    var description = $('#editEventDescription').val().trim();

    if (await saveMainEvent(eventId, name, speechName, fastPathMinutes, description, active))
    {
      $('#editEventModal').modal('hide');
      successToast('Event saved successfully!');
      await sleep(500);
      window.location.hash = '#events';
      window.location.reload();
    }
  });

  function deleteEventDialog(eventId)
  {
    var event = existingEvents.find(event => event.eventId === eventId);

    if (event !== undefined)
    {

      $('#eventToDelete').val(event.eventId);
      $('#eventToDeleteName').html(event.name);
      $('#eventToDeleteWhen').html(formatDate(event.when));

      $('#deleteEventModal').modal();
    }
    else
    {
      errorToast('Could not find event to delete');
    }
  }  

  $('#deleteEventForm').submit(async function(e)
  {
    e.preventDefault();

    var eventId = $('#eventToDelete').val();

    if (await deleteEvent(eventId))
    {
      successToast('Event deleted successfully!');
      await sleep(500);
      $('#deleteEventModal').modal('hide');
      window.location.hash = '#events';
      window.location.reload();
    }
    else
    {
      $('#deleteEventModal').modal('hide');
    }
  });

</script>