<div class="container pt-3">

  <h3 class="py-3">Administration</h3>

  <p class="pb-2">
    Use this page to edit users, deploy contact flows and control access to rule sets.
  </p>

  <div class="text-center mb-3">
    {{#if administrator}}
      <button type="button" id="createUser" class="btn btn-success mt-2" onClick="createUserDialog();">Create user</button>
    {{/if}}

    {{#if administrator}}
      <button type="button" id="systemHealth" class="btn btn-primary mt-2" onClick="systemHealthDialog();">System health</button>
    {{/if}}
  </div>


  <table id="usersTable" class="display responsive nowrap" width="100%" data-page-length="25">
    <thead>
      <tr>
          <th width="30%">User name</th>
          <th width="31%">Email</th>
          <th width="30%">Role</th>
          <th width="3%" class="dt-center"></th>
          <th width="3%" class="dt-center"></th>
          <th width="3%" class="dt-center"></th>
      </tr>
    </thead>
    <tbody>
      {{#each users}}
        <tr> 
          <td>
            {{this.firstName}} {{this.lastName}}
          </td>
          <td>
            {{this.emailAddress}}
          </td> 
          <td>
            {{this.userRole}}
          </td>
          <td class="dt-center">
            {{#if this.enabled}}
              <i class="fas fa-check text-success" title="Enabled"></i>
            {{else}}
              <i class="fas fa-times text-muted" title="Disabled"></i>
            {{/if}}
          </td>
          <td class="dt-center">
            <a href="javascript:editUserDialog('{{this.userId}}', '{{this.enabled}}', '{{this.emailAddress}}', '{{this.firstName}}', '{{this.lastName}}', '{{this.userRole}}');"><i class="fas fa-cog fa-lg text-primary" title="Configure"></i></a>
          </td>
          <td class="dt-center">
            <a href="javascript:deleteUserDialog('{{this.userId}}', '{{this.emailAddress}}');"><i class="fas fa-times-circle fa-lg text-danger" title="Delete"></i></a>
          </td>
        </tr>
      {{/each}}
    </tbody>
  </table>
</div>

</div>

<!-- 
###########################################
# Users
###########################################
-->

{{#if administrator}}
<div class="modal" tabindex="-1" role="dialog" id="createUserModal">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header text-white bg-dark">
        <h5 class="modal-title">Create a user</h5>
        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="createUserForm">
        <div class="modal-body">
          <div class="form-check pb-1">
            <input class="form-check-input" type="checkbox" checked id="userEnabled">
            <label class="form-check-label" for="userEnabled">
              Enable this user
            </label>
          </div>
          <div class="form-group">
            <label>First name *</label>
            <input type="text" class="form-control" id="firstName" maxLength="1024" minLength="1" placeholder="First name" required>
          </div>
          <div class="form-group">
            <label>Last name *</label>
            <input type="text" class="form-control" id="lastName" maxLength="1024" minLength="1" placeholder="Last name" required>
          </div>
          <div class="form-group">
            <label>Email address *</label>
            <input type="text" class="form-control" id="emailAddress" maxLength="1024" minLength="5" placeholder="Email address" required>
          </div>
          <div class="form-group">
            <label>User role *</label>
            <select class="form-control" id="userRole" required>
              <option></option>
              <option>ADMINISTRATOR</option>
              <option>POWER_USER</option>
              <option>TESTER</option>
            </select>
          </div>
          <div class="form-group">
            <label>User API Key *</label>
            <input type="text" class="form-control" id="apiKey" maxLength="1024" minLength="36" placeholder="Name" value="" required>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Create user</button>
        </div>
      </form>
    </div>
  </div>
</div>
{{/if}}

{{#if administrator}}
<div class="modal" tabindex="-1" role="dialog" id="editUserModal">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header text-white bg-dark">
        <h5 class="modal-title">Edit a user</h5>
        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="editUserForm">
        <input type="hidden" id="editUserId" value=""/>
        <div class="modal-body">
          <div class="form-check pb-1">
            <input class="form-check-input" type="checkbox" id="editUserEnabled">
            <label class="form-check-label" for="editUserEnabled">
              Enable this user
            </label>
          </div>
          <div class="form-group">
            <label>First name *</label>
            <input type="text" class="form-control" id="editFirstName" maxLength="1024" minLength="1" placeholder="First name" required>
          </div>
          <div class="form-group">
            <label>Last name *</label>
            <input type="text" class="form-control" id="editLastName" maxLength="1024" minLength="1" placeholder="Last name" required>
          </div>
          <div class="form-group">
            <label>Email address *</label>
            <input type="text" class="form-control" id="editEmailAddress" maxLength="1024" minLength="5" placeholder="Email address" required>
          </div>
          <div class="form-group">
            <label>User role *</label>
            <select class="form-control" id="editUserRole" required>
              <option></option>
              <option>ADMINISTRATOR</option>
              <option>POWER_USER</option>
              <option>TESTER</option>
            </select>
          </div>
          <div class="form-group">
            <label>User API Key</label>
            <div class="row">
              <div class="col-9">
                <input type="text" class="form-control" id="editApiKey" maxLength="1024" minLength="36" placeholder="API key" value="">
              </div>
              <div class="col-3 text-center">
                <button type="button" class="btn btn-outline-danger" onClick="resetAPIKey()">Reset API Key</button>
              </div>
            </div>
            <small>Leave blank to keep the same API key, update to reset the API key</small>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Update user</button>
        </div>
      </form>
    </div>
  </div>
</div>
{{/if}}

{{#if administrator}}
<div class="modal" tabindex="-1" role="dialog" id="deleteUserModal">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header text-white bg-dark">
        <h5 class="modal-title">Delete user</h5>
        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="deleteUserForm">
        <input type="hidden" id="userToDelete" value=""/>
        
        <div class="modal-body">
          <div class="form-group">
            <p>Are you sure you want to delete the user: <span id="userToDeleteEmailAddress">Unknown</span>?</p>
            <p>
              This cannot be undone!
            </p>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-danger">Delete user</button>
        </div>
      </form>
    </div>
  </div>
</div>
{{/if}}

<!-- 
###########################################
# System health
###########################################
-->

{{#if administrator}}
<div class="modal" tabindex="-1" role="dialog" id="systemHealthModal">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header text-white bg-dark">
        <h5 class="modal-title">Checking system health</h5>
        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="systemHealthForm">
        <div class="modal-body">
          <div id="systemHealthResults">
            <div class="text-center"><img src="img/loading.gif" class="img-fluid" alt="Loading..."></div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        </div>
      </form>
    </div>
  </div>
</div>
{{/if}}

<script>

  $(document).ready(function () 
  {
    $('#usersTable').DataTable( 
    {
      responsive: {
        details: false
      },
      language: {
        emptyTable: 'No users are currently configured'
      },
      order: [[ 0, "asc" ]],
      columns: [
        {
          responsivePriority: 1,
          orderable: true
        },
        { 
          responsivePriority: 6,
          orderable: true
        },
        { 
          responsivePriority: 3,
          orderable: true
        },
        {
          responsivePriority: 5,
          orderable: true
        },
        {
          responsivePriority: 2,
          orderable: false
        },
        {
          responsivePriority: 4,
          orderable: false
        }
      ]
    });
  });

  function createUserDialog()
  {
    $('#apiKey').val(uuidv4());
    $('#createUserModal').modal();
  }

  $('#createUserForm').submit(async function(e)
  {
    e.preventDefault();

    var firstName = $('#firstName').val().trim();
    var lastName = $('#lastName').val().trim();
    var emailAddress = $('#emailAddress').val().trim();
    var userRole = $('#userRole').val().trim();
    var userEnabled = $('#userEnabled').is(':checked');
    var apiKey = $('#apiKey').val().trim();

    if (await createUser(firstName, lastName, emailAddress, userRole, apiKey, userEnabled))
    {
      $('#createUserModal').modal('hide');
      window.location.hash = '#admin';
      window.location.reload();
    }
  });

  function deleteUserDialog(userId, emailAddress)
  {
    $('#userToDelete').val(userId);
    $('#userToDeleteEmailAddress').html(emailAddress);
    $('#deleteUserModal').modal();
  }  

  $('#deleteUserForm').submit(async function(e)
  {
    e.preventDefault();

    var userId = $('#userToDelete').val();

    if (await deleteUser(userId))
    {
      $('#deleteUserModal').modal('hide');      
      successToast('User deleted successfully!');
      await sleep(500);
      window.location.hash = '#admin';
      window.location.reload();
    }
    else
    {
      $('#deleteUserModal').modal('hide');
    }
  });

  function editUserDialog(userId, enabled, emailAddress, firstName, lastName, userRole)
  {
    $('#editUserId').val(userId);

    if (enabled === 'true')
    {
      $('#editUserEnabled').attr('checked', 'checked');
    }
    else
    {
      $('#editUserEnabled').removeAttr('checked');
    }

    $('#editFirstName').val(firstName);
    $('#editLastName').val(lastName);
    $('#editEmailAddress').val(emailAddress);
    $('#editUserRole').val(userRole);
    $('#editApiKey').val('');

    $('#editUserModal').modal();
  }

  function resetAPIKey()
  {
    $('#editApiKey').val(uuidv4());
  }

  $('#editUserForm').submit(async function(e)
  {
    e.preventDefault();

    var userId = $('#editUserId').val();
    var firstName = $('#editFirstName').val().trim();
    var lastName = $('#editLastName').val().trim();
    var emailAddress = $('#editEmailAddress').val().trim();
    var userRole = $('#editUserRole').val().trim();
    var userEnabled = $('#editUserEnabled').is(':checked');
    var apiKey = $('#editApiKey').val().trim();

    if (await updateUser(userId, firstName, lastName, emailAddress, userRole, apiKey, userEnabled))
    {
      $('#editUserModal').modal('hide');
      successToast('User updated successfully!');
      await sleep(500);
      window.location.hash = '#admin';
      window.location.reload();
    }
  });

  async function systemHealthDialog()
  {
    $('#systemHealthResults').html('<div class="text-center"><img src="img/loading.gif" class="img-fluid" alt="Loading..."></div>');

    $('#systemHealthModal').modal();

    try
    {
      var systemHealth = await getSystemHealth();
      renderSystemHealth(systemHealth);
      successToast('System health loaded');
    }
    catch (error)
    {
      logError('Failed to load system health', error);
      $('#systemHealthResults').html('<div class="text-center text-danger py-5">An error occurred loading system health</div>');
    }
  }

  function renderSystemHealth(systemHealth)
  {
    var html = '';

    if (systemHealth.status === 'UNHEALTHY')
    {
      html += `<div class="py-2 text-center"><h4><i class="fas fa-exclamation-circle fa-lg text-danger"></i> System status: ${systemHealth.status}!</h4></div>`;
    }
    else
    {
      html += `<div class="text-center py-2"><h4><i class="fas fa-check-circle fa-lg text-success"></i> System status: ${systemHealth.status}</h4></div>`;
    }

    if (systemHealth.contactFlows.status === 'UNHEALTHY')
    {
      html += `<div class="text-center"><h5>Contact flows - ${systemHealth.contactFlows.status} <button class="btn btn-danger" onclick="repairContactFlowsLocal();">Repair</button></h5></div>`;
    }
    else
    {
      html += `<div class="text-center"><h5>Contact flows - ${systemHealth.contactFlows.status} <button class="btn btn-success" onclick="repairContactFlowsLocal();">Repair</button></h5></div>`;
    }

    systemHealth.contactFlows.contactFlows.forEach(contactFlow => {
      html += '<div class="row"><div class="col-3 text-right">';

      if (contactFlow.status !== 'HEALTHY')
      {
        html += '<i class="fas fa-exclamation-circle fa-lg text-danger"></i>';
      }
      else
      {
        html += '<i class="fas fa-check-circle fa-lg text-success"></i>';
      }

      html += '</div>';

      html += '<div class="col-5">';
      html += contactFlow.name;
      html += '</div>';

      html += '<div class="col-4">';
      html += contactFlow.status;
      html += '</div>';
      html += '</div>';
    });

    if (systemHealth.lambdaFunctions.status === 'UNHEALTHY')
    {
      html += `<div class="pt-2 text-center"><h5>Lambda functions - ${systemHealth.lambdaFunctions.status} <button class="btn btn-danger" onclick="repairLambdaFunctionsLocal();">Repair</button></h5></div>`;
    }
    else
    {
      html += `<div class="pt-2 text-center"><h5>Lambda functions - ${systemHealth.lambdaFunctions.status} <button class="btn btn-success" onclick="repairLambdaFunctionsLocal();">Repair</button></h5></div>`;
    }

    systemHealth.lambdaFunctions.lambdaFunctions.forEach(lambdaFunction => {
      html += '<div class="row"><div class="col-3 text-right">';

      if (lambdaFunction.status !== 'HEALTHY')
      {
        html += '<i class="fas fa-exclamation-circle fa-lg text-danger"></i>';
      }
      else
      {
        html += '<i class="fas fa-check-circle fa-lg text-success"></i>';
      }

      html += '</div>';

      html += '<div class="col-5">';
      html += lambdaFunction.name;
      html += '</div>';

      html += '<div class="col-4">';
      html += lambdaFunction.status;
      html += '</div>';
      html += '</div>';
    });

    $('#systemHealthResults').html(html);
  }

  /**
   * Repairs contact flows
   */ 
  async function repairContactFlowsLocal()
  {
    try
    {
      var status = await repairContactFlows();
      $('#systemHealthModal').modal('hide');
      var statusString = `Created: ${status.createdFlows} Repaired: ${status.repairedFlows} contact flow(s)`;
      successToast(statusString);
    }
    catch (error)
    {
      console.log('[ERROR] failed to repair contact flows', error);
      errorToast('Failed to repair contact flows');
    }
  }

  /**
   * Repairs lambda functions flows
   */ 
  async function repairLambdaFunctionsLocal()
  {
    try
    {
      var status = await repairLambdaFunctions();
      $('#systemHealthModal').modal('hide');
      var statusString = `Repaired: ${status.repairedFunctions} function(s)`;
      successToast(statusString);
    }
    catch (error)
    {
      console.log('[ERROR] failed to repair lambda functions', error);
      errorToast('Failed to repair lambda functions');
    }
  }

</script>