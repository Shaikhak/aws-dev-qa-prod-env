<div class="container paddedDiv pt-3">

  <h3 class="py-3">Configure rule sets</h3>

  <p class="pb-3">
    Rule sets represent a modular set of customer interactions with Amazon Connect.
    Rule sets can be associated with one or more Amazon Connect inbound phone numbers or linked to from another rule set.
  </p>

  <div class="text-center mb-3">
    {{#unless tester}}
      <button type="button" id="createRuleSet" class="btn btn-success my-2" onClick="createRuleSetDialog();">Create rule set</button>
    {{/unless}}
    {{#if administrator}}
      <label class="btn btn-warning my-2">
        Import rule sets <input type="file" id="importRuleSets" class="d-none" accept=".json">
      </label>
      <button type="button" id="exportRuleSets" class="btn btn-primary my-2" onClick="exportRuleSets();">Export rule sets</button>  
    {{/if}}
  </div>

  <table id="ruleSetsTable" class="display responsive nowrap" width="100%" data-page-length="25">
    <thead>
      <tr>
          <th width="30%">Rule set name</th>
          <th width="31%">Description</th>
          <th width="30%">Inbound numbers</th>
          <th width="3%" class="dt-center"></th>
          <th width="3%" class="dt-center"></th>
          <th width="3%" class="dt-center"></th>
      </tr>
    </thead>
    <tbody>
      {{#each ruleSets}}
        <tr> 
          <td>
            {{this.name}}
          </td>
          <td>
            {{this.description}}
            {{#empty this.description}}
              None
            {{/empty}}
          </td> 
          <td>
            {{#each this.inboundNumbers}}{{#if @first}}{{this}}{{else}}, {{this}}{{/if}}{{/each}}
            {{#empty this.inboundNumbers}}
              None
            {{/empty}}
          </td>
          <td class="dt-center">
            {{#if this.enabled}}
              <i class="fas fa-check text-success" title="Enabled"></i>
            {{else}}
              <i class="fas fa-times text-muted" title="Disabled"></i>
            {{/if}}
          </td>
          <td class="dt-center">
            <a href="javascript:configureRuleSet('{{this.ruleSetId}}');"><i class="fas fa-cog fa-lg text-primary" title="Configure"></i></a>
          </td>
          <td class="dt-center">
            {{#if ../tester}}
              <i class="fas fa-times-circle fa-lg text-muted" title="Delete disabled"></i>
            {{else}}
              <a href="javascript:deleteRuleSetDialog('{{this.ruleSetId}}', '{{this.name}}');"><i class="fas fa-times-circle fa-lg text-danger" title="Delete"></i></a>
            {{/if}}
          </td>
        </tr>
      {{/each}}
    </tbody>
  </table>
</div>

<!-- 
###########################################
# Rules sets
###########################################
-->
{{#unless tester}}
<div class="modal" tabindex="-1" role="dialog" id="createRuleSetModal">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header text-white bg-dark">
        <h5 class="modal-title">Create a rule set</h5>
        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="createRuleSetForm">
        <div class="modal-body">
          <div class="form-group">
            <label>Rule set name *</label>
            <input type="text" class="form-control" id="ruleSetName" maxLength="1024" minLength="2" placeholder="Name" required>
            <small>Enter a name for this rule set</small>
          </div>
          <div class="form-check pb-1">
            <input class="form-check-input" type="checkbox" value="" id="ruleSetEnabled" checked>
            <label class="form-check-label" for="ruleSetEnabled">
              Enable this rule set
            </label>
          </div>
          <div class="form-group">
            <label>Rule set description</label>
            <textarea class="form-control" id="ruleSetDescription" maxLength="1024" placeholder="Description" rows="3"></textarea>
            <small>Enter a description for this rule set (optional)</small>
          </div>
          <hr>
          <div class="form-group">
            <label>Inbound numbers</label>
            <div class="row">
              <div class="col-6">
                <input type="hidden" name="selectedNumbers" id="selectedNumbers" value="">
                <select id="availablePhoneNumbers" class="form-control">
                  <option value="">{{#empty availableNumbers}}No unallocated inbound numbers found{{/empty}}</option>
                  {{#each availableNumbers}}
                  <option value="{{this.PhoneNumber}}">{{this.PhoneNumber}}</option>
                  {{/each}}
                </select>
              </div>
              <div class="col-3">
                <button type="button" class="btn btn-outline-secondary btn-block" onclick="addPhoneNumber();">Claim number</button>
              </div>
              <div class="col-3">
              </div>
            </div>
            <small>Select the inbound numbers you want this rule set to manage</small>
          </div>
          <div id="selectedNumbersDiv">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Create rule set</button>
        </div>
      </form>
    </div>
  </div>
</div>
{{/unless}}

{{#unless tester}}
<div class="modal" tabindex="-1" role="dialog" id="deleteRuleSetModal">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header text-white bg-dark">
        <h5 class="modal-title">Delete rule set</h5>
        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="deleteRuleSetForm">
        <input type="hidden" id="ruleSetToDelete" value=""/>
        <div class="modal-body">
          <div class="form-group">
            <p>Are you sure you want to delete rule set: <span id="ruleSetToDeleteName">Unknown</span>?</p>
            <p>
              This cannot be undone and will remove all rules for this rules set!
            </p>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-danger">Delete</button>
        </div>
      </form>
    </div>
  </div>
</div>
{{/unless}}

<div class="container paddedDiv pt-3 pb-5">

  <h3 class="py-3">Connectivity graph</h3>

  <p class="pb-3">
    View the current connectivity between phone numbers, rule sets, queues and external flows.
  </p>

  <div id="mynetwork" class="networkgraph">
    <div class="text-center">
      <img src="img/loading.gif" class="img-fluid" alt="Loading...">
    </div>
  </div>

</div>

<script>

  $(document).ready(function () 
  {
    clearStorage('currentRuleSet');
    clearStorage('currentRule');
    clearStorage('currentTest');

    var ruleSetsTable = $('#ruleSetsTable').DataTable( 
    {
      responsive: {
        details: false
      },
      language: {
        emptyTable: 'No rule sets are currently configured'
      },
      order: [[ 0, "asc" ]],
      columns: [
        {
          responsivePriority: 1,
          orderable: true,
          render: function (data, type, row)
          { 
            return `<i class="far fa-copy fa-sm float-right text-muted" onclick="copyName('${data}');" title="Copy name"></i>${formatTooltip(type, data, 30)}`;
          }
        },
        { 
          responsivePriority: 6,
          orderable: false,
          render: function (data, type, row)
          { 
            return formatTooltip(type, data, 30);
          }
        },
        { 
          responsivePriority: 5,
          orderable: false,
          render: function (data, type, row)
          { 
            return formatTooltip(type, data, 50);
          }
        },
        {
          responsivePriority: 4,
          orderable: false
        },
        {
          responsivePriority: 2,
          orderable: false
        },
        {
          responsivePriority: 3,
          orderable: false
        }
      ]
    });

    ruleSetsTable.on('search.dt', function () {
      filterConnectivityGraph(ruleSetsTable.search());
    });

    // Wait for a second after loading before loading and rendering the graph
    setTimeout(loadGraphModel, 10);
  });

  //-------------------------------
  // Rule sets
  //-------------------------------

  function createRuleSetDialog()
  {
    $('#createRuleSetModal').modal();
  }

  $('#createRuleSetForm').submit(async function(e)
  {
    e.preventDefault();

    var ruleSetName = $('#ruleSetName').val().trim();
    var ruleSetDescription = $('#ruleSetDescription').val().trim();
    var ruleSetEnabled = $('#ruleSetEnabled').is(':checked');
    var inboundNumbers = [];

    var inboundNumbersString = $('#selectedNumbers').val();

    if (inboundNumbersString !== '')
    {
      inboundNumbers = inboundNumbersString.split('|');
    }

    var pattern = /^([0-9A-Za-z \-\_]?){2,64}$/;

    if (!ruleSetName.match(pattern))
    {
      alert('Rule set names must contain simple characters');
      return;
    }

    var ruleSetId = await createRuleSet(ruleSetName, ruleSetEnabled, ruleSetDescription, inboundNumbers);

    if (ruleSetId !== undefined)
    {
      $('#createRuleSetModal').modal('hide');
      successToast('Created your rule set');
      configureRuleSet(ruleSetId);
    }
  });

  /**
   * Adds a phone numnber to listen to
   */
  function addPhoneNumber()
  {
    var newPhoneNumber = $('#availablePhoneNumbers').val();

    if (newPhoneNumber === '')
    {
      return;
    }

    console.log('[INFO] adding phone: ' + newPhoneNumber);

    var selectedNumbers = $('#selectedNumbers').val();

    if (selectedNumbers.includes(newPhoneNumber))
    {
      console.log('[INFO] number already bound: ' + newPhoneNumber);
      return;
    }

    if (selectedNumbers === '')
    {
      selectedNumbers = newPhoneNumber;
    }
    else
    {
      selectedNumbers += '|' + newPhoneNumber;
    }

    $('#selectedNumbers').val(selectedNumbers);

    renderSelectedNumbers();
  }

  /**
   * Removes a phone numnber
   */
  function removePhoneNumber(phoneToRemove)
  {
    console.log('[INFO] removing phone: ' + phoneToRemove);

    var selectedNumbers = $('#selectedNumbers').val();

    var split = selectedNumbers.split('|');

    var filtered = split.filter(phone => phone !== phoneToRemove);

    $('#selectedNumbers').val(filtered.join('|'));

    renderSelectedNumbers();
  }

  /**
   * Renders the selected numbers
   */
  function renderSelectedNumbers()
  {
    var html = '';

    var selectedNumbers = $('#selectedNumbers').val();

    if (selectedNumbers !== '')
    {
      var split = selectedNumbers.split('|');

      split.forEach(phoneNumber => {
        html += `<hr><div class="row align-self-center"><div class="col-6">${phoneNumber}</div><div class="col-3"><button class="btn btn-block btn-outline-warning" onclick="removePhoneNumber('${phoneNumber}');">Remove</button></div><div class="col-3"></div></div>`
      });
    }

    $('#selectedNumbersDiv').html(html);
  }

  function deleteRuleSetDialog(ruleSetId, ruleName)
  {
    $('#ruleSetToDelete').val(ruleSetId);
    $('#ruleSetToDeleteName').html(ruleName);
    $('#deleteRuleSetModal').modal();
  }  

  $('#deleteRuleSetForm').submit(async function(e)
  {
    e.preventDefault();

    var ruleSetId = $('#ruleSetToDelete').val();

    if (await deleteRuleSet(ruleSetId))
    {
      successToast('Ruleset deleted successfully!');
      await sleep(500);
      $('#deleteRuleSetModal').modal('hide');
      window.location.hash = '#configure';
      window.location.reload();
    }
    else
    {
      $('#deleteRuleSetModal').modal('hide');
    }
  });

  function configureRuleSet(ruleSetId)
  {
    clearStorage('currentRule');
    store('currentRuleSet', ruleSetId);
    document.location.hash = '#configureRuleSet';
  }

  function copyName(name)
  {
    const el = document.createElement('textarea');
    el.value = name;
    el.setAttribute('readonly', '');
    el.style.position = 'absolute';
    el.style.left = '-9999px';
    document.body.appendChild(el);
    el.select();
    document.execCommand('copy');
    document.body.removeChild(el);
    successToast('Copied: ' + name);
  }

  var network = undefined;
  var nodes = undefined;
  var edges = undefined;

  async function loadGraphModel()
  {
    console.log('[INFO] loading the graph data');
    var ruleSetsGraphData = await getRuleSetsGraph();
    nodes = new vis.DataSet(ruleSetsGraphData.nodes);
    edges = new vis.DataSet(ruleSetsGraphData.edges);

    console.log('[INFO] rendering the graph data');
    buildConnectivityGraph();
  }

  var currentFilter = undefined;

  function filterConnectivityGraph(searchTerm)
  {
    currentFilter = searchTerm;

    if (network === undefined)
    {
      return;
    }

    searchTerm = searchTerm.toLowerCase();

    var matchingRuleSets = nodes.get({
      filter: function (item) {
        return (item.type === 'ruleSet') && (item.label.toLowerCase().includes(searchTerm) || item.title.toLowerCase().includes(searchTerm));
      }
    });

    matchingRuleSets.forEach(node => {
      node.image = 'img/icons/ruleset.png';
      nodes.update(node);
    });

    var unmatchingRuleSets = nodes.get({
      filter: function (item) {
        return (item.type === 'ruleSet') && (!item.label.toLowerCase().includes(searchTerm) && !item.title.toLowerCase().includes(searchTerm));
      }
    });

    unmatchingRuleSets.forEach(node => {
      node.image = 'img/icons/ruleset_unselected.png';
      nodes.update(node);
    });

  }  

  /**
   * Build a connectivity graph with graph data from the server
   * with an optional search term
   */
  function buildConnectivityGraph()
  {
    var container = document.getElementById("mynetwork");
    var data = {
      nodes: nodes,
      edges: edges,
    };

    var options = {
      interaction: {
        zoomView: true,
        dragView: true
      },
      physics: {
        stabilization: {
          enabled: true, 
          iterations: 1000, 
          updateInterval: 100
        },
        solver: 'forceAtlas2Based',        
        forceAtlas2Based: {
          springLength: 100
        }
      },
      edges: {
        arrowStrikethrough: false,
        color: {
          opacity: 0.9
        }
      },
      configure: {
        enabled: false,
        filter: 'physics,nodes,edges,layout,interaction',
        container: container,
        showButton: true
      }
    };
    network = new vis.Network(container, data, options);

    var zoomLimitMin = 
    {
      scale: 0.1,
    }

    var zoomLimitMax = 
    {
      scale: 2.0,
    }

    network.on("zoom",function()
    {
      if (network.getScale() <= zoomLimitMin.scale)
      {
        network.moveTo(zoomLimitMin);
      }

      if (network.getScale() >= zoomLimitMax.scale)
      {
        network.moveTo(zoomLimitMax);
      }
    });

    network.on("doubleClick",function(e)
    {
      if (e.nodes && e.nodes.length > 0)
      {
        var node = nodes.get(e.nodes[0]);

        if (node)
        { 
          if (node.ruleSetId !== undefined)
          {
            configureRuleSet(node.ruleSetId);
          }         
        }
      }
    });

    if (currentFilter !== undefined)
    {
      filterConnectivityGraph(currentFilter);
    }
  }

  /**
   * Exports all rule sets
   */
  async function exportRuleSets()
  {

    var ruleSets = await getRuleSetsForExport();
    var json = JSON.stringify(ruleSets, null, 2);
    var name = `RuleSets-${moment().local().format('YYYY-MM-DDTHHmm')}.json`;
    var blob = new Blob([json], {type: 'application/json;charset=utf-8'});
    saveAs(blob, name);
  }

  /**
   * Listen for import requests
   */
  $('#importRuleSets').change(function(event) {
    const file = event.target.files[0];
    
    const reader = new FileReader();

    reader.addEventListener('load', async (event) => {
      try
      {
        var json = event.target.result;

        console.log('%j', event.target.result);

        var ruleSets = JSON.parse(json);

        if (!Array.isArray(ruleSets)|| ruleSets.length === 0)
        {
          console.log('[ERROR] failed to import rule sets, input file not an array or no rule sets');
          errorToast('Input file must contain rule sets');
          return;
        }

        if (ruleSets[0].name === undefined || 
            ruleSets[0].description === undefined || 
            ruleSets[0].enabled === undefined || 
            ruleSets[0].inboundNumbers === undefined ||
            ruleSets[0].rules === undefined)
        {
          console.log('[ERROR] failed to import rule sets, first element was not a rule set');
          errorToast('Input file must contain valid rule sets');
          return;
        }

        stickySuccessToast(`Importing ${ruleSets.length} rulesets...`);

        await importRuleSets(ruleSets);

        successToast(`Successfully imported ${ruleSets.length} rulesets!`);

        await sleep(1000);

        window.location.hash = '#configure';
        window.location.reload();
      }
      catch (error)
      {
        console.log('[ERROR] failed to import rule sets', error);
        errorToast('Failed to import rule sets');
      }
    });

    reader.readAsText(file);
  });


</script>